#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         testMdlDL
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.general.helpFnc import reshapeMdlData
from src.model.models import tfMdlCNN, tfMdlDNN, tfMdlLSTM

# ==============================================================================
# External
# ==============================================================================
import os
import tensorflow as tf


#######################################################################################################################
# Function
#######################################################################################################################
def testMdlDL(data, setupDat, setupPar, setupMdl, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Test Model (DL)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # CPU/GPU
    # ==============================================================================
    if setupExp['gpu'] == 1:
        os.environ['CUDA_VISIBLE_DEVICES'] = '0'
        physical_devices = tf.config.list_physical_devices('GPU')
        tf.config.experimental.set_memory_growth(physical_devices[0], True)
    else:
        os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
        tf.config.set_visible_devices([], 'GPU')

    # ==============================================================================
    # Variables
    # ==============================================================================
    mdl = []
    dataPred = {'T': {}}

    # ==============================================================================
    # Name
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '/cp.ckpt'

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Reshape Data
    # ==============================================================================
    [data['T']['X'], data['T']['y']] = reshapeMdlData(data['T']['X'], data['T']['y'], setupDat, setupPar, 0)

    # ==============================================================================
    # Model Input and Output
    # ==============================================================================
    if len(setupDat['out']) == 1:
        if setupPar['outseq'] >= 1:
            out = data['T']['y'].shape[1]
        else:
            out = 1
    else:
        out = len(setupDat['out'])

    # ==============================================================================
    # Create Model
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    if setupPar['method'] == 0:
        activation = 'linear'
    else:
        activation = 'sigmoid'

    # ------------------------------------------
    # DNN
    # ------------------------------------------
    if setupPar['model'] == "DNN":
        mdl = tfMdlDNN(data['T']['X'], out, activation)

    # ------------------------------------------
    # CNN
    # ------------------------------------------
    if setupPar['model'] == "CNN":
        mdl = tfMdlCNN(data['T']['X'], out, activation)

    # ------------------------------------------
    # LSTM
    # ------------------------------------------
    if setupPar['model'] == "LSTM":
        mdl = tfMdlLSTM(data['T']['X'], out, activation)

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    try:
        mdl.load_weights(mdlName)
        print("INFO: Model loaded")
    except:
        print("ERROR: Model could not be loaded")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Compiling
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    # RMSprop
    if setupMdl['opt'] == 'RMSprop':
        opt = tf.keras.optimizers.RMSprop(learning_rate=setupMdl['lr'], rho=setupMdl['rho'],
                                          momentum=setupMdl['mom'], epsilon=setupMdl['eps'])

    # SGD
    elif setupMdl['opt'] == 'SDG':
        opt = tf.keras.optimizers.SGD(learning_rate=setupMdl['lr'], momentum=setupMdl['mom'])

    # Adam
    else:
        opt = tf.keras.optimizers.Adam(learning_rate=setupMdl['lr'], beta_1=setupMdl['beta1'],
                                       beta_2=setupMdl['beta2'], epsilon=setupMdl['eps'])

    # ------------------------------------------
    # Compile
    # ------------------------------------------
    mdl.compile(optimizer=opt, loss=setupMdl['loss'], metrics=setupMdl['metric'])

    # ==============================================================================
    # Test
    # ==============================================================================
    dataPred['T']['y'] = mdl.predict(data['T']['X'])
    dataPred['T']['X'] = data['T']['X']

    ###################################################################################################################
    # References
    ###################################################################################################################
    return dataPred
