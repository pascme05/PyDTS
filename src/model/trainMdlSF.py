#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         trainMdlSF
# Date:         21.04.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import tensorflow as tf
import os
import time
from sys import getsizeof
from neuralforecast.core import NeuralForecast
from neuralforecast.auto import NHITS, LSTM, NBEATSx
import copy
import pandas as pd


#######################################################################################################################
# Function
#######################################################################################################################
def trainMdlSF(data, setupDat, setupPar, setupMdl, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Training Model (SF)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # CPU/GPU
    # ==============================================================================
    if setupExp['gpu'] == 1:
        os.environ['CUDA_VISIBLE_DEVICES'] = '0'
        physical_devices = tf.config.list_physical_devices('GPU')
        tf.config.experimental.set_memory_growth(physical_devices[0], True)
    else:
        os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
        tf.config.set_visible_devices([], 'GPU')

    # ==============================================================================
    # Parameters
    # ==============================================================================
    EPOCHS = setupMdl['epoch']
    window = setupPar['window']
    horizon = setupPar['ahead']
    sampling_times = 1 / setupDat['fs']

    # ==============================================================================
    # Variables
    # ==============================================================================
    start_time = '2021-01-01 00:00:00'
    mdl = []

    # ==============================================================================
    # Name
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name']

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Reshape Data
    # ==============================================================================
    dataTrain = copy.deepcopy(data['T']['X'])
    dataTrain = pd.DataFrame(data=dataTrain, columns=setupDat['inpLabel'])
    dataTrain = dataTrain.rename(columns={setupDat['out'][0]: 'y'})
    datetime_index = pd.date_range(start=start_time, periods=len(dataTrain), freq=f'{sampling_times}S')
    dataTrain.insert(0, 'ds', datetime_index)
    dataTrain.insert(0, 'unique_id', 1.0)

    # ==============================================================================
    # Configuration
    # ==============================================================================

    # ==============================================================================
    # Create Model
    # ==============================================================================
    # ------------------------------------------
    # NHITS
    # ------------------------------------------
    if setupPar['model'] == "NHITS":
        mdl = [NHITS(h=horizon,
                     input_size=window,
                     futr_exog_list=setupDat['fut'],
                     hist_exog_list=setupDat['his'],
                     scaler_type='robust',
                     max_steps=EPOCHS,
                     learning_rate=setupMdl['lr'])]

    # ------------------------------------------
    # LSTM
    # ------------------------------------------
    if setupPar['model'] == "LSTM":
        mdl = [LSTM(h=horizon,
                    input_size=window,
                    futr_exog_list=setupDat['fut'],
                    hist_exog_list=setupDat['his'],
                    scaler_type='robust',
                    max_steps=EPOCHS,
                    learning_rate=setupMdl['lr'])]

    # ------------------------------------------
    # NBEATS
    # ------------------------------------------
    if setupPar['model'] == "NBEATS":
        mdl = [NBEATSx(h=horizon,
                       input_size=window,
                       futr_exog_list=setupDat['fut'],
                       hist_exog_list=setupDat['his'],
                       scaler_type='robust',
                       max_steps=EPOCHS,
                       learning_rate=setupMdl['lr'])]

    # ==============================================================================
    # Compiling
    # ==============================================================================
    mdl = NeuralForecast(models=mdl, freq=setupMdl['SF_Freq'])

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    try:
        mdl = NeuralForecast.load(path=mdlName)
        print("INFO: Model will be retrained")
    except:
        print("INFO: Model will be created")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Start timer
    # ==============================================================================
    start = time.time()

    # ==============================================================================
    # Train
    # ==============================================================================
    mdl.fit(df=dataTrain)

    # ==============================================================================
    # End timer
    # ==============================================================================
    ende = time.time()
    trainTime = (ende - start)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    mdl.save(path=mdlName,
             model_index=None,
             overwrite=True,
             save_dataset=True)

    ###################################################################################################################
    # Output
    ###################################################################################################################
    print("INFO: Total training time (sec): %.2f" % trainTime)
    print("INFO: Training time per sample (ms): %.2f" % (trainTime / data['T']['X'].shape[0] * 1000))
    print("INFO: Model size (kB): %.2f" % (getsizeof(mdl) / 1024 / 8))
