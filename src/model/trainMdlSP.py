#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         trainMdlSP
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from nfoursid.nfoursid import NFourSID
import pickle
import pandas as pd
import tfest
import time
from sys import getsizeof


#######################################################################################################################
# Function
#######################################################################################################################
def trainMdlSP(data, t, setupPar, setupMdl, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Training Model (SP)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '.pckl'

    # ==============================================================================
    # Variables
    # ==============================================================================
    mdl = []

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Reshape data
    # ==============================================================================
    # ------------------------------------------
    # State-Space
    # ------------------------------------------
    if np.size(data['T']['X'].shape) == 3:
        data['T']['X'] = data['T']['X'].reshape((data['T']['X'].shape[0], data['T']['X'].shape[1] * data['T']['X'].shape[2]))

    # ------------------------------------------
    # To Dataframe
    # ------------------------------------------
    colX = list(np.zeros(data['T']['X'].shape[1]))
    for idx in range(data['T']['X'].shape[1]):
        colX[idx] = 'X' + str(idx)

    if data['T']['y'].ndim == 1:
        colY = ['Y0']
    else:
        colY = list(np.zeros(data['T']['y'].shape[1]))
        for idx in range(data['T']['y'].shape[1]):
            colY[idx] = 'Y' + str(idx)

    train = pd.DataFrame(data['T']['X'], columns=colX)
    trainY = pd.DataFrame(data['T']['y'], columns=colY)
    train[colY] = trainY

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Start timer
    # ==============================================================================
    start = time.time()

    # ==============================================================================
    # State-Space Model
    # ==============================================================================
    if setupPar['model'] == 'SS':
        n4sid = NFourSID(train, output_columns=colY, input_columns=colX, num_block_rows=setupMdl['SP_SS_block'])
        n4sid.subspace_identification()
        mdl, _ = n4sid.system_identification(rank=setupMdl['SP_SS_order'])

    # ==============================================================================
    # Transfer-Function Model
    # ==============================================================================
    if setupPar['model'] == 'TF':
        mdl = tfest.tfest(u=data['T']['X'][:, 0], y=data['T']['y'][:, 0])
        mdl.estimate(setupMdl['SP_TF_zeros'], setupMdl['SP_TF_poles'], method=setupMdl['SP_TF_method'],
                     l1=setupMdl['SP_TF_l1'], time=t[-1] - t[0])
        mdl = mdl.get_transfer_function()

    # ==============================================================================
    # End timer
    # ==============================================================================
    ende = time.time()
    trainTime = (ende - start)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Save model
    # ==============================================================================
    f = open(mdlName, 'wb')
    pickle.dump(mdl, f)
    f.close()

    ###################################################################################################################
    # Output
    ###################################################################################################################
    print("INFO: Total training time (sec): %.2f" % trainTime)
    print("INFO: Training time per sample (ms): %.2f" % (trainTime/data['T']['X'].shape[0]*1000))
    print("INFO: Model size (kB): %.2f" % (getsizeof(mdl) / 1024 / 8))
