#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         testMdlSP
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import scipy.signal as signal
import pickle
import copy
from scipy.signal import dlti, dlsim


#######################################################################################################################
# Function
#######################################################################################################################
def testMdlSP(data, time, setupPar, setupMdl, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Testing Model (SP)")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    mdlName = 'mdl/mdl_' + setupPar['model'] + '_' + setupExp['name'] + '.pckl'

    # ==============================================================================
    # Variables
    # ==============================================================================
    dataPred = {'T': {}}
    dataPred['T']['X'] = copy.deepcopy(data['T']['X'])
    time = time - time[0]

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Reshape data
    # ==============================================================================
    if np.size(data['T']['X'].shape) == 3:
        data['T']['X'] = data['T']['X'].reshape((data['T']['X'].shape[0], data['T']['X'].shape[1] * data['T']['X'].shape[2]))

    # ==============================================================================
    # Load model
    # ==============================================================================
    file = open(mdlName, 'rb')
    mdl = pickle.load(file)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # State-Space Model
    # ==============================================================================
    if setupPar['model'] == 'SS':
        sys = dlti(mdl.a, mdl.b, mdl.c, mdl.d, dt=time[1]-time[0])
        _, dataPred['T']['y'], _  = sys.output(data['T']['X'], time[0:data['T']['X'].shape[0]], x0=np.zeros(setupMdl['SP_SS_order']))

    # ==============================================================================
    # State-Space Model
    # ==============================================================================
    if setupPar['model'] == 'TF':
        sys = signal.TransferFunction(mdl.num, mdl.den, dt=time[1]-time[0])
        _, dataPred['T']['y'] = dlsim(sys, u=data['T']['X'][:, 0], t=time)

    ###################################################################################################################
    # References
    ###################################################################################################################
    return dataPred
