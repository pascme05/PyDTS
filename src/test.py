#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         test
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.preprocess import preprocess
from src.postprocess import postprocess
from src.general.framing import framing
from src.general.features import features
from src.general.createSeq import createSeq
from src.model.testMdlDL import testMdlDL
from src.model.testMdlML import testMdlML
from src.model.testMdlSP import testMdlSP
from src.general.performance import performance
from src.general.plotting import plotting
from src.general.printResults import printResults
from src.general.save import save
from src.general.featureRank import featureRank
from src.general.adaptDim import adaptDim
from src.data.summaryData import summaryData

# ==============================================================================
# External
# ==============================================================================


#######################################################################################################################
# Function
#######################################################################################################################
def test(data, setupExp, setupDat, setupPar, setupMdl, setupPath):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Running PyDTS (Testing)")
    print("\n")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    dataTest = {'T': {}, 'V': {}}
    dataPred = {'T': {'X': [], 'y': []}}

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Preprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Data Summary
    # ==============================================================================
    summaryData(data['T']['X'], data['T']['y'], setupDat)

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    [data['T'], t, _] = preprocess(data['T'], setupDat, setupPar)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Framing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Framing and Edge Detection")
    print("------------------------------------------")

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    if setupPar['frame'] == 1:
        if setupPar['overlap'] == -1:
            dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], 0)
            dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], 0)
        else:
            if setupPar['outseq'] == 0:
                dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['window'] - 1)
                dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['window'] - 1)
            else:
                dataTest['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['window'] - setupPar['outseq'])
                dataTest['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['window'] - setupPar['outseq'])
    else:
        dataTest['T']['X'] = data['T']['X'].values
        dataTest['T']['y'] = data['T']['y'].values
        print("INFO: No frames calculated using raw data")

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Features
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Feature Extraction")
    print("------------------------------------------")

    # ==============================================================================
    # Testing Data
    # ==============================================================================
    if setupPar['feat'] == 1 or setupPar['feat'] == 3:
        dataTest['T']['X'] = features(dataTest['T']['X'], setupMdl['feat'])
    else:
        print("INFO: No features calculated using raw data")

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Sequence
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Creating Input Sequence")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTest['T']['y'] = createSeq(dataTest['T']['y'], setupPar)

    # ==============================================================================
    # Adapt Dimension
    # ==============================================================================
    [dataTest['T']['X'], dataTest['T']['y'], ndim] = adaptDim(dataTest['T']['X'], dataTest['T']['y'], setupPar)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ###################################################################################################################
    # Training
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Testing")
    print("------------------------------------------")

    # ==============================================================================
    # Model
    # ==============================================================================
    # ------------------------------------------
    # Classical Learning
    # ------------------------------------------
    if setupPar['solver'] == 'SP':
        dataPred = testMdlSP(dataTest, t, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Machine Learning
    # ------------------------------------------
    elif setupPar['solver'] == 'ML':
        dataPred = testMdlML(dataTest, setupPar, setupExp)

    # ------------------------------------------
    # Deep Learning
    # ------------------------------------------
    elif setupPar['solver'] == 'DL':
        dataPred = testMdlDL(dataTest, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Short-Time-Forecasting
    # ------------------------------------------
    elif setupPar['solver'] == 'SF':
        dataPred = testMdlDL(dataTest, setupDat, setupPar, setupMdl, setupExp)

    # ------------------------------------------
    # Closed Loop Modeling
    # ------------------------------------------
    elif setupPar['solver'] == 'CL':
        dataPred = testMdlDL(dataTest, setupDat, setupPar, setupMdl, setupExp)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ####################################################################################################################
    # Post-Processing
    ####################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Postprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Unfold
    # ==============================================================================
    if len(ndim) == 2:
        dataTest['T']['X'] = dataTest['T']['X'].reshape((dataTest['T']['X'].shape[0], ndim[1]))
        dataPred['T']['X'] = dataPred['T']['X'].reshape((dataPred['T']['X'].shape[0], ndim[1]))
    else:
        dataTest['T']['X'] = dataTest['T']['X'].reshape((dataTest['T']['X'].shape[0], ndim[1], ndim[2]))
        dataPred['T']['X'] = dataPred['T']['X'].reshape((dataPred['T']['X'].shape[0], ndim[1], ndim[2]))

    # ==============================================================================
    # Calc
    # ==============================================================================
    [dataTest['T'], dataPred['T']] = postprocess(dataTest['T'], dataPred['T'], setupPar, setupDat)

    # ==============================================================================
    # Msg
    # ==============================================================================
    print("\n")

    ####################################################################################################################
    # Output
    ####################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Output")
    print("------------------------------------------")

    # ==============================================================================
    # Performance
    # ==============================================================================
    # ------------------------------------------
    # Error
    # ------------------------------------------
    [result, resultAvg] = performance(dataPred['T']['y'], dataTest['T']['y'], dataPred['T']['L'], dataTest['T']['L'], setupDat)

    # ------------------------------------------
    # Ranking
    # ------------------------------------------
    [feaScore, feaError] = featureRank(data['T']['X'], data['T']['y'], setupDat, setupMdl, setupPar)

    # ==============================================================================
    # Console
    # ==============================================================================
    printResults(result, resultAvg, setupDat)

    # ==============================================================================
    # Plotting
    # ==============================================================================
    if setupExp['plot'] != 0:
        plotting(data, dataTest['T'], dataPred['T'], resultAvg, feaScore, feaError, setupDat)

    # ==============================================================================
    # Saving
    # ==============================================================================
    if setupExp['save'] != 0:
        save(dataTest['T']['y'], dataPred['T']['y'], result, resultAvg, setupDat, setupPar, setupExp, setupPath)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Running PyDTS (Testing)")

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [result, resultAvg]
