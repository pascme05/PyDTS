#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         optiHyp
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.data.loadData import loadData
from src.preprocess import preprocess
from src.general.framing import framing
from src.general.features import features
from src.general.createSeq import createSeq
from src.model.trainMdlDLopti import trainMdlDLopti
from src.model.trainMdlMLopti import trainMdlMLopti
from src.general.adaptDim import adaptDim

# ==============================================================================
# External
# ==============================================================================
import copy


#######################################################################################################################
# Function
#######################################################################################################################
def optiHyp(setupExp, setupDat, setupPar, setupMdl, setupPath):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")
    print("Welcome to PyDTS: A toolkit for timeseries simulation")
    print("Mode:       Optimising Hyperparameter")
    print("Author:     Dr. Pascal A. Schirmer")
    print("Copyright:  Pascal Schirmer")
    print("Version:    v.0.1")
    print("Date:       14.09.2023")
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")
    print("\n\n")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    method = 2
    setupExp['log'] = 1

    # ==============================================================================
    # Variables
    # ==============================================================================
    nameTrain = setupDat['train'][0]
    data = {}
    dataTrain = {'T': {}, 'V': {}}

    ###################################################################################################################
    # Loading Data
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Loading Data")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    [data['T'], setupDat] = loadData(setupExp, setupDat, setupPar, setupMdl, setupPath, nameTrain, method, 1, [])
    [data['V'], _] = loadData(setupExp, copy.deepcopy(setupDat), setupPar, setupMdl, setupPath, nameTrain, method, 2, [])

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Preprocessing")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    [data['T'], _, _] = preprocess(data['T'], setupDat, setupPar)
    [data['V'], _, _] = preprocess(data['V'], setupDat, setupPar)

    ###################################################################################################################
    # Framing
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Framing and Edge Detection")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTrain['T']['X'] = framing(data['T']['X'], setupPar['window'], setupPar['overlap'])
        dataTrain['T']['y'] = framing(data['T']['y'], setupPar['window'], setupPar['overlap'])
        dataTrain['V']['X'] = framing(data['V']['X'], setupPar['window'], setupPar['overlap'])
        dataTrain['V']['y'] = framing(data['V']['y'], setupPar['window'], setupPar['overlap'])
    else:
        dataTrain['T']['X'] = data['T']['X'].values
        dataTrain['T']['y'] = data['T']['y'].values
        dataTrain['V']['X'] = data['V']['X'].values
        dataTrain['V']['y'] = data['V']['y'].values

    ###################################################################################################################
    # Features
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Feature Extraction")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['feat'] == 1 or setupPar['feat'] == 3:
        dataTrain['T']['X'] = features(dataTrain['T']['X'], setupMdl['feat'])
        dataTrain['V']['X'] = features(dataTrain['V']['X'], setupMdl['feat'])

    ###################################################################################################################
    # Sequence
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Creating Input Sequence")
    print("------------------------------------------")

    # ==============================================================================
    # Calc
    # ==============================================================================
    if setupPar['frame'] == 1:
        dataTrain['T']['y'] = createSeq(dataTrain['T']['y'], setupPar)
        dataTrain['V']['y'] = createSeq(dataTrain['V']['y'], setupPar)

    # ==============================================================================
    # Adapt Dimension
    # ==============================================================================
    [dataTrain['T']['X'], dataTrain['T']['y'], _] = adaptDim(dataTrain['T']['X'], dataTrain['T']['y'], setupPar)
    [dataTrain['V']['X'], dataTrain['V']['y'], _] = adaptDim(dataTrain['V']['X'], dataTrain['V']['y'], setupPar)

    ###################################################################################################################
    # Training
    ###################################################################################################################
    # ==============================================================================
    # Msg
    # ==============================================================================
    print("------------------------------------------")
    print("START: Optimising Hyperparameters")
    print("------------------------------------------")

    # ==============================================================================
    # Model
    # ==============================================================================
    # ------------------------------------------
    # Machine Learning
    # ------------------------------------------
    if setupPar['solver'] == 'ML':
        trainMdlMLopti(dataTrain, setupPar)

    # ------------------------------------------
    # Deep Learning
    # ------------------------------------------
    elif setupPar['solver'] == 'DL':
        trainMdlDLopti(dataTrain, setupDat, setupPar, setupMdl, setupExp)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("DONE: Running PyDTS (Optimising)")
    print('----------------------')
