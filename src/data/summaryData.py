#######################################################################################################################
#######################################################################################################################
# Title:        BaseNILM toolkit for energy disaggregation
# Topic:        Non-intrusive load monitoring utilising machine learning, pattern matching and source separation
# File:         summaryData
# Date:         21.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import copy
from texttable import Texttable


#######################################################################################################################
# Additional Functions
#######################################################################################################################
def rms(x):
    return np.sqrt(x.dot(x)/x.size)


#######################################################################################################################
# Function
#######################################################################################################################
def summaryData(X, y, setupDat):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Summary of the data")

    ###################################################################################################################
    # Init
    ###################################################################################################################
    X = X.drop(['time', 'id'], axis=1)
    y = y.drop(['time', 'id'], axis=1)
    F = len(X.columns)
    M = len(y.columns)
    namesF = X.columns
    unitsF = setupDat['inpUnits']
    namesM = y.columns
    unitsM = setupDat['outUnits']

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Aggregated Data
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    table = Texttable()
    table.set_deco(Texttable.HEADER)
    table.set_cols_dtype(['i', 't', 't', 'a', 'a', 'a', 'a', 'a', 'a'])
    table.set_cols_align(["l", "l", "l", "l", "l", "l", "l", "l", "l"])
    table.header(['ID', 'Feature', 'Unit', 'MIN', 'MAX', 'AVG', 'RMS', 'SUM', 'STD'])

    # ------------------------------------------
    # Msg In
    # ------------------------------------------
    print("INFO: Aggregated data")
    print('-----------------------------------------------------------------------------------------------------------')
    print('-----------------------------------------------------------------------------------------------------------')

    # ------------------------------------------
    # Iterate
    # ------------------------------------------
    for i in range(0, F):
        table.add_row([i, namesF[i], unitsF[namesF[i]][0], np.min(X.iloc[:, i]), np.max(X.iloc[:, i]), np.mean(X.iloc[:, i]),
                      rms(X.iloc[:, i]), np.sum(X.iloc[:, i]) / 3.6e6, np.std(X.iloc[:, i])])

    # ------------------------------------------
    # Msg In
    # ------------------------------------------
    print(table.draw())
    print("\n")

    # ==============================================================================
    # Appliance Data
    # ==============================================================================
    # ------------------------------------------
    # Init
    # ------------------------------------------
    table = Texttable()
    table.set_deco(Texttable.HEADER)
    table.set_cols_dtype(['i', 't', 't', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])
    table.set_cols_align(["l", "l", "l", "l", "l", "l", "l", "l", "l", "l"])
    table.header(['ID', 'Device', 'Unit', 'MIN', 'MAX', 'AVG', 'RMS', 'SUM', 'STD', 'ON'])

    # ------------------------------------------
    # Msg In
    # ------------------------------------------
    print("INFO: Appliance data")
    print('-----------------------------------------------------------------------------------------------------------')
    print('-----------------------------------------------------------------------------------------------------------')

    # ------------------------------------------
    # Iterate
    # ------------------------------------------
    for i in range(0, M):
        activity = copy.deepcopy(y.iloc[:, i])
        activity[activity < setupDat['threshold']] = 0
        activity[activity >= setupDat['threshold']] = 1
        table.add_row([i, namesM[i], unitsM[namesM[i]][0], np.min(y.iloc[:, i]), np.max(y.iloc[:, i]), np.mean(y.iloc[:, i]),
                      rms(y.iloc[:, i]), np.sum(y.iloc[:, i]) / 3.6e6, np.std(y.iloc[:, i]), np.sum(activity)/len(activity)*100])

    # ------------------------------------------
    # Msg In
    # ------------------------------------------
    print(table.draw())
    print("\n")

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return []
