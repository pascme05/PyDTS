#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         features
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from scipy import stats


#######################################################################################################################
# Function
#######################################################################################################################
def features(data, feat):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Calculating Features")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    F = sum(feat.values())
    dim = data.ndim
    idx = 0

    # ==============================================================================
    # Variables
    # ==============================================================================
    if dim == 2:
        out = np.zeros((len(data), F))
    elif dim == 3:
        out = np.zeros((len(data), data.shape[2], F))
    else:
        out = np.zeros((len(data), F))

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Mean
    # ==============================================================================
    if feat['Mean'] == 1:
        if dim == 2:
            out[:, idx] = np.mean(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.mean(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Std
    # ==============================================================================
    if feat['Std'] == 1:
        if dim == 2:
            out[:, idx] = np.std(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.std(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # RMS
    # ==============================================================================
    if feat['RMS'] == 1:
        if dim == 2:
            out[:, idx] = np.sqrt(np.mean(data ** 2, axis=1))
        elif dim == 3:
            out[:, :, idx] = np.sqrt(np.mean(data ** 2, axis=1))
        idx = idx + 1

    # ==============================================================================
    # Peak2Rms
    # ==============================================================================
    if feat['Peak2Rms'] == 1:
        if dim == 2:
            temp = np.max(data, axis=1)
            temp2 = np.sqrt(np.mean(data ** 2, axis=1))
            out[:, idx] = np.divide(temp, temp2)
        elif dim == 3:
            temp = np.max(data, axis=1)
            temp2 = np.sqrt(np.mean(data ** 2, axis=1))
            out[:, :, idx] = np.divide(temp, temp2)
        idx = idx + 1

    # ==============================================================================
    # Median
    # ==============================================================================
    if feat['Median'] == 1:
        if dim == 2:
            out[:, idx] = np.median(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.median(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # MIN
    # ==============================================================================
    if feat['Min'] == 1:
        if dim == 2:
            out[:, idx] = np.min(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.min(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # MAX
    # ==============================================================================
    if feat['Max'] == 1:
        if dim == 2:
            out[:, idx] = np.max(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.max(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Per25
    # ==============================================================================
    if feat['Per25'] == 1:
        if dim == 2:
            out[:, idx] = np.percentile(data, 25, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.percentile(data, 25, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Per75
    # ==============================================================================
    if feat['Per75'] == 1:
        if dim == 2:
            out[:, idx] = np.percentile(data, 75, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.percentile(data, 75, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Energy
    # ==============================================================================
    if feat['Energy'] == 1:
        if dim == 2:
            out[:, idx] = np.sum(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.sum(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Var
    # ==============================================================================
    if feat['Var'] == 1:
        if dim == 2:
            out[:, idx] = np.var(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.var(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Range
    # ==============================================================================
    if feat['Range'] == 1:
        if dim == 2:
            out[:, idx] = np.ptp(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = np.ptp(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # 3rdMoment
    # ==============================================================================
    if feat['3rdMoment'] == 1:
        if dim == 2:
            out[:, idx] = stats.skew(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = stats.skew(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # 4th Moment
    # ==============================================================================
    if feat['4thMoment'] == 1:
        if dim == 2:
            out[:, idx] = stats.kurtosis(data, axis=1)
        elif dim == 3:
            out[:, :, idx] = stats.kurtosis(data, axis=1)
        idx = idx + 1

    # ==============================================================================
    # Diff
    # ==============================================================================
    if feat['dt'] == 1:
        if dim == 2:
            temp = np.mean(data, axis=1)
            out[:, idx] = np.diff(np.vstack((np.zeros(data.shape[2]), temp)), 1, axis=0)
        elif dim == 3:
            temp = np.mean(data, axis=1)
            out[:, :, idx] = np.diff(np.vstack((np.zeros(data.shape[2]), temp)), 1, axis=0)
        idx = idx + 1

    # ==============================================================================
    # DiffDiff
    # ==============================================================================
    if feat['dtdt'] == 1:
        if dim == 2:
            temp = np.mean(data, axis=1)
            out[:, idx] = np.diff(np.vstack((np.zeros([2, data.shape[2]]), temp)), 2, axis=0)
        elif dim == 3:
            temp = np.mean(data, axis=1)
            out[:, :, idx] = np.diff(np.vstack((np.zeros([2, data.shape[2]]), temp)), 2, axis=0)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Replacing NaNs and Inf
    # ==============================================================================
    out = np.nan_to_num(out)
    out[out == np.inf] = 0

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return out
