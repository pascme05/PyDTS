#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         featuresPhy
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import pandas as pd
import numpy as np
import copy


#######################################################################################################################
# Function
#######################################################################################################################
def featuresPhy(X, units):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Calculate Physics Features")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    # ------------------------------------------
    # General
    # ------------------------------------------
    N = X.shape[0]                                                                                                       # number of samples
    Ts = X['time'].iloc[1] - X['time'].iloc[0]                                                                           # sampling time (sec)

    # ------------------------------------------
    # Other Variables
    # ------------------------------------------

    # ==============================================================================
    # Functions
    # ==============================================================================

    # ==============================================================================
    # Variables
    # ==============================================================================
    Xout = X.values

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    newVar = np.ones(N)

    ###################################################################################################################
    # Output Features
    ###################################################################################################################
    # ==============================================================================
    # Extend
    # ==============================================================================
    Xout = np.concatenate((Xout, np.expand_dims(newVar, axis=1)), axis=1)

    # ==============================================================================
    # Convert
    # ==============================================================================
    columns = ['col1', 'col2', 'colN']
    Xout = pd.DataFrame(Xout, columns=columns)

    # ==============================================================================
    # Units
    # ==============================================================================
    unit = pd.DataFrame(columns=Xout.columns)
    unit.loc[0] = ['unit1', 'unit2', 'unitN']

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [Xout, unit]
