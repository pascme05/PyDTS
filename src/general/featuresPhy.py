#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         featuresPhy
# Date:         01.08.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import pandas as pd
import numpy as np
import copy
from scipy import integrate


#######################################################################################################################
# Function
#######################################################################################################################
def featuresPhy(X):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Calculate Physics Features")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    # ------------------------------------------
    # General
    # ------------------------------------------
    N = X.shape[0]                                                                                                       # number of samples
    Ts = X['time'][1] - X['time'][0]

    # ------------------------------------------
    # Physical
    # ------------------------------------------
    g = 9.81                                                                                                             # acceleration due to gravity of the earth (m/s2)

    # ------------------------------------------
    # Vehicle
    # ------------------------------------------
    p_a = 1.204                                                                                                          # air density (kg/m3)
    v_w = 0                                                                                                              # head-wind (m/s)
    A = 2.22                                                                                                             # vehicle front surface (m2)
    c_w = 0.25                                                                                                           # vehicle shape factor (-)
    m = 2400                                                                                                             # vehicle mass (kg)
    c_r = 0.01                                                                                                           # vehicle rolling resistance (-)
    m_a = 100                                                                                                            # vehicle acceleration mass (kg)
    ig = 9                                                                                                               # gear ratio
    r = 0.32

    # ------------------------------------------
    # Drive Train
    # ------------------------------------------
    # Ema
    nc = 3500 / 60
    Rs = 300e-6
    Rr = 8
    Rfe = 1000
    c_b = 0.3
    c_a = 0.06

    # INV
    Vnom = 650
    Ron = 1e-3
    Eon = 10e-6
    Eoff = 10e-6
    fs = 10e3

    # GBX
    c_bear = 0.3
    c_mesh = 0.6
    c_wind = 0.06

    # ------------------------------------------
    # Battery
    # ------------------------------------------
    Rbat = 3e-3

    # ------------------------------------------
    # Other
    # ------------------------------------------
    tau = 1800
    Rth = 30 / 100

    # ==============================================================================
    # Function
    # ==============================================================================

    # ==============================================================================
    # Variables
    # ==============================================================================
    Xout = copy.deepcopy(X)
    Tc = X['T_U']
    t = X['time']
    idx = X['id']
    n = X['n'] / 60
    M = X['M']
    vol = X['Vol']
    Ta = X['T_U']
    Idc = X['I_DC']
    Vdc = X['V_DC']

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Derived Variables
    # ==============================================================================
    # ------------------------------------------
    # Vehicle
    # ------------------------------------------
    v = 2*np.pi*r*n/ig
    a = np.gradient(v, dx=Ts)
    ang = np.zeros(N)

    # ------------------------------------------
    # Inverter
    # ------------------------------------------
    Mi = n / nc
    Mi[Mi >= 0.906] = 0.906

    # ------------------------------------------
    # EMA
    # ------------------------------------------
    Ir = n / nc
    Mi[Mi >= 25] = 25
    Is = Idc * np.pi / (3 * np.sqrt(2) * Mi)
    Vs = Vdc / np.sqrt(6) * 1.15 / 0.906 * Mi

    # ==============================================================================
    # State
    # ==============================================================================
    try:
        state = np.zeros(len(v))
        state[v > 0] = 1
    except:
        if v > 0:
            state = 1
        else:
            state = 0

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Vehicle
    # ==============================================================================
    # ------------------------------------------
    # Forces
    # ------------------------------------------
    Fp = 0.5 * p_a * A * c_w * (v_w - v) ** 2
    Fr = c_r * m * g * np.cos(ang) * state
    Fc = m * g * np.sin(ang)
    Fa = (m + m_a) * a

    # ------------------------------------------
    # Power
    # ------------------------------------------
    Pp = Fp * v
    Pr = Fr * v
    Pc = Fc * v
    Pa = Fa * v
    Pt = 2 * np.pi * M * n

    # ------------------------------------------
    # Energy
    # ------------------------------------------
    Ep = integrate.cumtrapz(Pp, t, initial=0)
    Er = integrate.cumtrapz(Pr, t, initial=0)
    Ec = integrate.cumtrapz(Pc, t, initial=0)
    Ea = integrate.cumtrapz(Pa, t, initial=0)
    Et = integrate.cumtrapz(abs(Vdc * Idc) - abs(Pt), t, initial=0)

    # ==============================================================================
    # Drive Train
    # ==============================================================================
    # ------------------------------------------
    # EMA
    # ------------------------------------------
    # Stator
    Pv_EMA_Sta_Ohm = 3 * Is * Rs
    Pv_EMA_Sta_Mag = 3 * (Vs - Rs * Is) ** 2 / Rfe

    # Rotor
    Pv_EMA_Rot_Ohm = 3 * Ir * Rr

    # Mech
    Pv_EMA_Bea = c_b * np.abs(n)
    Pv_EMA_Win = c_a * n ** 2

    # Total
    Pv_EMA = Pv_EMA_Sta_Ohm + Pv_EMA_Sta_Mag + Pv_EMA_Rot_Ohm + Pv_EMA_Bea + Pv_EMA_Win

    # ------------------------------------------
    # INV
    # ------------------------------------------
    Pv_INV_Con = 6 * Is / np.sqrt(2) * Ron
    Pv_INV_Swi = 6 * (Eon + Eoff) * fs * Vdc/Vnom
    Pv_INV = Pv_INV_Con + Pv_INV_Swi

    # ------------------------------------------
    # GBX
    # ------------------------------------------
    Pv_GBX_b = c_bear * np.abs(n)
    Pv_GBX_m = c_mesh * np.abs(n)
    Pv_GBX_w = c_wind * n ** 2
    Pv_GBX = Pv_GBX_b + Pv_GBX_m + Pv_GBX_w

    # ==============================================================================
    # Battery
    # ==============================================================================
    Pv_BAT = Rbat * Idc ** 2

    # ==============================================================================
    # Other
    # ==============================================================================
    Pv_OTH = (abs(Vdc * Idc) - abs(Pt) - Pv_EMA - Pv_INV) * 0.8
    Pv_OTH[Pv_OTH < 0] = 0

    # ==============================================================================
    # Coolant Temp. Prediction
    # ==============================================================================
    for i in range(1, N):
        # ------------------------------------------
        # ID Change
        # ------------------------------------------
        if idx[i] != idx[i-1]:
            Tc[i] = Ta[i]

        # ------------------------------------------
        # No ID Change
        # ------------------------------------------
        else:
            # Nominal
            if 35 < Tc[i-1] < 45:
                Tc[i] = (2 * tau - Ts) / (2 * tau + Ts) * Tc[i - 1] + (Rth * Ts) / (2 * tau + Ts) * (
                            Pv_BAT[i] + Pv_BAT[i - 1])

            # Hot
            elif Tc[i-1] < 35:
                Tc[i] = (2 * tau - Ts) / (2 * tau + Ts) * Tc[i - 1] + (0.8*Rth * Ts) / (2 * tau + Ts) * (
                            Pv_BAT[i] + Pv_BAT[i - 1])

            # Cold
            else:
                Tc[i] = (2 * tau - Ts) / (2 * tau + Ts) * Tc[i - 1] + (1.2*Rth * Ts) / (2 * tau + Ts) * (
                        Pv_BAT[i] + Pv_BAT[i-1])

    ###################################################################################################################
    # Output Features
    ###################################################################################################################
    # ==============================================================================
    # Convert to PD
    # ==============================================================================
    Fp = pd.DataFrame(Fp, columns=['Fp'])
    Fr = pd.DataFrame(Fr, columns=['Fr'])
    Fc = pd.DataFrame(Fc, columns=['Fc'])
    Fa = pd.DataFrame(Fa, columns=['Fa'])
    Et = pd.DataFrame(Fa, columns=['Et'])
    Pv_EMA = pd.DataFrame(Pv_EMA, columns=['Pv_EMA'])
    Pv_INV = pd.DataFrame(Pv_INV, columns=['Pv_INV'])
    Pv_GBX = pd.DataFrame(Pv_GBX, columns=['Pv_GBX'])
    Pv_BAT = pd.DataFrame(Pv_BAT, columns=['Pv_BAT'])
    Pv_OTH = pd.DataFrame(Pv_OTH, columns=['Pv_OTH'])
    Tc = pd.DataFrame(Tc, columns=['Tc'])

    # ==============================================================================
    # Attach
    # ==============================================================================
    Xout = pd.concat([Xout, Fp, Fr, Fc, Fa, Et, Pv_EMA, Pv_INV, Pv_GBX, Pv_BAT, Pv_OTH, Tc], axis=1)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return Xout
