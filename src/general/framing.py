#######################################################################################################################
#######################################################################################################################
# Title:        PyDTS (Python Deep Timeseries Simulation)
# Topic:        Black-Box Modeling
# File:         framing
# Date:         03.11.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.1
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.external.sliding_window import sliding_window

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def framing(data, window, overlap):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Start Framing Data")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    dim = data.ndim
    fields = data.columns

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Init
    # ==============================================================================
    step = window - overlap

    # ==============================================================================
    # Calc
    # ==============================================================================
    if dim == 2:
        temp = np.shape(data)
        out = np.zeros((int(np.floor(temp[0] / step) + window), window, data.shape[1]))
        for i in range(0, len(fields)):
            temp = sliding_window(data[fields[i]].values, window, step)
            out[0:len(temp), :, i] = sliding_window(data[fields[i]].values, window, step)
        out = out[0:len(temp), :, :]
    else:
        out = sliding_window(data, window, step)

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return out
